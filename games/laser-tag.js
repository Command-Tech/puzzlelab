/*
@title: laser tag
*/

const player1 = "1"
const player2 = "2"
const wall = "3"
const upLaser = "4"
const downLaser = "5"
const leftLaser = "6"
const rightLaser = "7"
const vert = "8"
const horz = "9"
const target = "a"

setLegend([
  [ player1, bitmap`
................
................
........333.....
.......33..33...
......3.....33..
....33.......3..
...33.3....3..3.
...3..........3.
...33........33.
....3........3..
.....33.....33..
......333..33...
......3.3333....
......3....3....
.....33....333..
....33.......3..` ],
  [ player2, bitmap`
................
................
................
.....5555.5.....
.....5....55....
....55......5...
....5.5..5..5...
....5.......5...
....5......55...
....5555.555....
......5555......
......5..5......
......5..5......
......5..5......
...5555..5555...
.........55.....` ],
  [ wall, bitmap`
0000000000000000
00............00
000..........000
0.00........00.0
0..00......00..0
0...0.....00...0
0....0...0.....0
0.....0.0......0
0.....00.......0
0....00.0......0
0....0...0.....0
0...0.....0....0
0..0.......00..0
0.0.........00.0
00...........000
0000000000000000` ],
  [ upLaser, bitmap`
................
................
.........3......
........33......
.......333......
......33.33.....
....333.333.....
...33...3..3....
..33....3...33..
........3....3..
........3....33.
........3.......
........3.......
........3.......
................
................` ],
  [ rightLaser, bitmap`
................
................
................
.......3........
.......33.......
........33......
.........33.....
...........3....
..33333333333...
...........33...
...........3....
..........3.....
........33......
.......33.......
................
................` ],
  [ downLaser, bitmap`
................
................
.......3........
.......3........
.......3........
.......3........
.......3........
.......3........
.......3........
.......3........
...3...3.....3..
....3..3....3...
.....3.3..33....
.....3.3.3......
......333.......
.......3........` ],
  [ leftLaser, bitmap`
................
................
................
................
......3.........
.....3..........
...33...........
..3.............
.3333333333333..
.3..............
..3.............
...3............
....3...........
.....3..........
......3.........
.......3........` ],
  [ vert, bitmap`
................
................
................
.......3........
.......3........
.......3........
.......3........
.......3........
.......3........
.......3........
.......3........
.......3........
.......3........
................
................
................` ],
  [ horz, bitmap`
................
................
................
................
................
................
................
..333333333333..
................
................
................
................
................
................
................
................` ],
  [ target, bitmap`
................
................
................
...4444444444...
...44....4..4...
...4.4...4..4...
...4.4..4...4...
...4..4.4...4...
...4..44....4...
...4...4...4....
...4..4.4..4....
...4..4.4..4....
...4.4...4.4....
...4.4...4.4....
...44444..44....
........4444....`]
])

setSolids([
    player1, 
    player2, 
    wall, 
    upLaser,
    downLaser,
    leftLaser,
    rightLaser
]);

let level = 0;
const levels = [
    map`
.......
a......
a....3.
71...2.
...4...`,
    map`
a......
7......
a....3.
.1...2.
...4...`,
];

let activePlayer = player1;

const getActivePlayer = () => getFirst(activePlayer);



onInput("up", _ => {
    const p1 = getFirst(player1);
    const p2 = getFirst(player2);
    if (p1.y < p2.y) {
        p1.y -= 1;
        p2.y -= 1;
    } else {
        p2.y -= 1;
        p1.y -= 1;
    }
})

onInput("down", _ => {
    const p1 = getFirst(player1);
    const p2 = getFirst(player2);
    if (p1.y > p2.y) {
        p1.y += 1;
        p2.y += 1;
    } else {
        p2.y += 1;
        p1.y += 1;
    }
})

onInput("left", _ => {
    const p1 = getFirst(player1);
    const p2 = getFirst(player2);
    if (p1.x < p2.x) {
        p1.x -= 1;
        p2.x -= 1;
    } else {
        p2.x -= 1;
        p1.x -= 1;
    }
})

onInput("right", _ => {
    const p1 = getFirst(player1);
    const p2 = getFirst(player2);
    if (p1.x > p2.x) {
        p1.x += 1;
        p2.x += 1;
    } else {
        p2.x += 1;
        p1.x += 1;
    }
})

/* reset level */
onInput("j", _ => {
    setMap(levels[level]);
    initLasers();
});

// onInput("k", _ => {
//     activePlayer = activePlayer === player1 
//         ? player2 
//         : player1;
// });

const isJustLaser = t => t.length === 1 
    && (t.map(x => x.type).includes(vert)
        || t.map(x => x.type).includes(horz)
        || t.map(x => x.type).includes(player2));

function initLasers() {
    // remove all lasers
    getAll(horz).forEach(s => s.remove());
    getAll(vert).forEach(s => s.remove());

    // add lasers back in
    getAll(upLaser).forEach(up => {
        let { x, y } = up;
        y -=1
        while (true) {
            if (y < 0) break;
            const t = getTile(x, y);
            if (t.length === 0 || isJustLaser(t)) addSprite(vert, x, y)
            else break;
            y--;
        }
    })

    getAll(downLaser).forEach(down => {
        let { x, y } = down;
        y +=1
        while (true) {
            if (y >= height()) break;
            const t = getTile(x, y);
            if (t.length === 0 || isJustLaser(t)) addSprite(vert, x, y)
            else break;
            y++;
        }
    })

    getAll(rightLaser).forEach(right => {
        let { x, y } = right;
        x +=1
        while (true) {
            if (x >= width()) break;
            const t = getTile(x, y);
            if (t.length === 0 || isJustLaser(t)) addSprite(horz, x, y)
            else break;
            x++;
        }
    })

   getAll(leftLaser).forEach(left => {
        let { x, y } = left;
        x -=1
        while (true) {
            if (x < 0) break;
            const t = getTile(x, y);
            if (t.length === 0 || isJustLaser(t)) addSprite(horz, x, y)
            else break;
            x--;
        }
    })
}

afterInput(_ => {
    initLasers();
    let finished = true;
    getAll(target).forEach(t => {
        finished = getTile(t.x, t.y).length === 2 && finished;
    })

    const dead = [
        ...tilesWith([player2, vert]),
        ...tilesWith([player2, horz])
    ]
    if (dead.length) {
        getFirst(player2).remove()
    }

    if (finished && level+1 < levels.length) {
        setMap(levels[++level]);
        initLasers();
    }
})

setMap(levels[level]);
initLasers();
