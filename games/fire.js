const smallFireLeft = "1";

setLegend(
    [ smallFireLeft, bitmap`
................
................
.....8.8........
....8.....8.....
...8.8.8.8.8....
..8.8.8.8.8.....
...8.888.8...3..
..3.3.8.3...3...
.3.333.3.....3..
..3.333.3.3.3...
.3...3.3.3.3.3..
......3.333.3...
...3.333.3.3....
....3.333.......
.......3........
................`],
    ['2', bitmap`
................
................
........3.3.....
.....3.....3....
....3.3.3.3.3...
.....3.3.3.3.3..
..3...3.333.3...
...3...3.3.3.3..
..3.....3.333.3.
...3.3.3.333.3..
..3.3.3.3.3...3.
...3.333.3......
....3.3.333.3...
.......333.3....
........3.......
................`],
    ['3', bitmap`
................
......3.3.......
.3.3.3.3........
..3.3.....3.3...
.3.3.3.3.3.3....
..3.3.3.3.3.....
.3.33333.3...3..
..3.333.3...3.3.
.3.333.3.....3..
3.3.333.3.3.3.3.
.3...333.333.3..
....3.33333.3.3.
...3.33333.3.3..
....3.333.3.3...
.......3........
................`],
    ['4', bitmap`
................
.......3.3......
........3.3.3.3.
...3.3.....3.3..
....3.3.3.3.3.3.
.....3.3.3.3.3..
..3...3.33333.3.
.3.3...3.333.3..
..3.....3.333.3.
.3.3.3.3.333.3.3
..3.333.333...3.
.3.3.33333.3....
..3.3.33333.3...
...3.3.333.3....
........3.......
................`],
    ['l', bitmap`
................
................
..........44....
........44..4...
......44.....4..
.....4.......4..
....4........4..
...4.........4..
..4444......4...
.44..44....4....
.4....4...4.....
.4....4..4......
.4....4.4.......
..4...44........
...444..........
................`],
    ['p', bitmap`
................
................
..........44....
........44..4...
......44.....4..
.....4.......4..
....4........4..
...4.........4..
..4444......4...
.44..44....40...
.40..04...4.0...
.4....4..4..0...
.4.00.4.40.0....
..4...44.0......
...444..0.......
................`],
    ['c', bitmap`
......4444......
....44....44....
..44........44..
.4............4.
4.44........44.4
4...44....44...4
4.4...4444...4.4
4...4...4....4.4
4.4.4.4.4.4..4.4
4.4.4...4......4
4.....4.4.4..4.4
.4..4.4.4.4...4.
..44....4...44..
....44..4.44....
......4444......
................`],  
    ['h', bitmap`
................
................
................
................
........5.......
......55.55.....
....55.....55...
...5.........5..
..5...........5.
....555555555...
.....5.....5....
....5.......5...
...5.........5..
...5.........5..
..5....555....5.
...555.555.555..`],
    ['g', bitmap`
..4.........4...
...4.........4..
...44........4..
....4.........4.
....44........4.
.....4........4.
.....44......4..
.....44...4.....
.....444...4....
4.....44....4...
.4....44....4...
.4...444.....4..
.4...44......4..
.4...........4..
4...........4...
................`]
)

const log = x => (console.log(x), x);

const isGrass = ({ type }) => type == "g";

const burnsBig = ({ type }) => "lc".split('').includes(type);
const needsBigFire = ({ type }) => type == "h";
const fireKinds = ["1", "2", "3", "4"];
const isFire = ({ type }) => fireKinds.includes(type);
const isSmallFire = ({ type }) => ["1", "2"].includes(type);
const fire = () => fireKinds.flatMap(getAll);
const replace = (t0, t1) => {
    getAll(t0).forEach(s => {
        s.type = t1;
    })
}
const neighbors = ({ x, y }) => [getTile(x+1, y+0),
                                 getTile(x-1, y+0),
                                 getTile(x+0, y+1),
                                 getTile(x+0, y-1),
                                 getTile(x, y)]
                                .flat()
                                .filter(x => x);
let tick = 0;
const ticker = window.activeTicker = setInterval(() => {
    if (window.activeTicker != ticker) return clearInterval(ticker);

    /* fire flicker */
    tick++;
     (tick % 2) ? replace("1", "2") : replace("2", "1");
    !(tick % 2) ? replace("3", "4") : replace("4", "3");

    /* fire spread */
    if (tick % 4 == 0) {
        const replacements = [];
        const tiles = getAll();
        tiles.forEach(fire => {
            if (!isFire(fire)) return;
            
            const ns = neighbors(fire);
            ns.forEach(tile => {
                if (isFire(tile)) return;
                if (isSmallFire(fire) && needsBigFire(tile)) return;
                replacements.push([ tile, burnsBig(tile) ? "3" : "1"]);
            })
            
            fire.remove();
        })

        replacements.forEach(r => {
            const [t, type] = r;
            t.type = type;
        })

        // return replacements
        
    }


    if (getAll("h").length == 0 && fire().length == 0)
        levels[1+level] && setMap(levels[++level]);
}, 200);

afterInput(() => {
    /* crate kill grass */
    for (const { x, y } of getAll('c'))
        for (const g of getTile(x, y).filter(isGrass))
            g.remove();
})


let level = 0;
const levels = [
    map`
.........
...8.8...
..88.88..
.88...8..
..0...84.
......44.
..44444..
..74...5.
.........`,
    map`
.........
..88.....
.8888....
.8788....
.888..6..
8888.....
88...5...
80.......
.........`,
    map`
..4444888
........8
........8
..7.....8
......6.8
..5.....8
........8
.......88
.0888888.`,
]
// .reverse();
setMap(levels[level]);
setSolids(["p", "l", "c"]);
setPushables({ p: ["c"] })
onInput( "left", () => getFirst("p").x--)
onInput("right", () => getFirst("p").x++)
onInput(   "up", () => getFirst("p").y--)
onInput( "down", () => getFirst("p").y++)
onInput(    "j", () => setMap(levels[level]));
